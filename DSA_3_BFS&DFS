#include<iostream>
#include<queue>
#include<vector>
#include<stack>


using namespace std;

vector<vector<int>> BFS_adjacency(int vertices,int edges){

    vector<vector<int>> graph(vertices,vector<int>(vertices, 0));
    int i , j ;
    cout<<"Enter the connection of edges:-"<<endl;
    for(int k = 0 ; k < edges ;k++){
        cin>> i >> j;
        graph[i][j] = 1;
        graph[j][i] = 1;
    }

    cout<<"The Adjacency Matrix is as follows:"<<endl;
    for(int i = 0 ; i < vertices;i++){
        for(int j = 0 ; j < vertices ;j++){
            cout<<graph[i][j]<<" ";
        }
        cout<<endl;
    }
    return graph;
}

void BFS(vector<vector<int>> graph, int vertices , int start){
    queue<int> q;
    queue<int> visitor;
    vector<int> visited(vertices, 0);
    visited[start] = 1;
    q.push(start);


    while(!q.empty()){
        int curr = q.front();
        q.pop();
        visitor.push(curr);
        for(int i = 0 ; i < vertices;i++){
            if(graph[curr][i] == 1 && visited[i] == 0){
                visited[i] = 1;
                q.push(i);
            }
        }
    }
    while (!visitor.empty()) {
        cout << visitor.front() << " ";
        visitor.pop();
    }
    cout << endl;
}

void DFS(vector<vector<int>>& graph , int vertices , int start){
    stack<int> s;
    vector<int> visited(vertices,0);
    s.push(start);
    visited[start] = 1;
    while(!s.empty()){
        int curr = s.top();
        s.pop();
        cout<<curr<<" ";
        for(int i = 0 ; i < vertices;i++){
            if(graph[curr][i] == 1 && visited[i] == 0){
                s.push(i);
                visited[i] = 1;
            }
        }
    }
    cout<<endl;
}

int main(){
    int vertices , edges ;
    cout<<"Enter the number of vertices: ";
    cin>>vertices;
    cout<<"\nEnter the number of edges in graph : ";
    cin>>edges;
    vector<vector<int>> graph = BFS_adjacency(vertices,edges);
    cout<<"\nBFS is as follows:"<<endl;
    BFS(graph,vertices,edges);
    cout<<"DFS is as follows"<<endl;
    DFS(graph,vertices,edges);
    return 0;
}
