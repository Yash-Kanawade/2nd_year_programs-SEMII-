#include<iostream>
#define INT_MAX 999
using namespace std;

class Prism{
    int n;
    int graph[10][10];
    public:
        void create();
        void display();
        void prism();
};


void Prism::create(){
    cout<<"Enter Total Numbers Of Vertices:";
    cin>>n;
    for(int i = 0 ; i < n;i++)
    {
        for(int j = 0 ; j < n;j++)
        {
            graph[i][j] = 0;
        }
    }

    int egdes;
    cout<<"Enter total number of edges:";
    cin>>egdes;
    int i , j , weight;
    for(int k = 0 ; k < egdes ;k++){
        cout<<"Enter the egde(u v) and weight:";
        cin>>i>>j>>weight;
        graph[i][j] = weight;
        graph[j][i] = weight;
    }
}


void Prism::display(){
    cout<<"Adjacency matrix is as follows:";
    for(int i = 0; i < n ;i++)
    {
        for(int j = 0; j < n;j++)
        {
            cout<<graph[i][j]<<" ";
        }
        cout<<endl;
    }
}


void Prism::prism(){
    int visited[n] = {0};
    int edges = 0,TotalCost = 0;
    visited[0] = 1;
    while(edges < n-1){
        int min = INT_MAX ;
        int u = -1 , v = -1;
        for(int i = 0 ; i < n; i++)
        {
            if(visited[i])
            {
            for(int j = 0 ; j < n ; j++)
            {
                if(!visited[j] && graph[i][j] != 0)
                {
                    if(min > graph[i][j])
                    {
                        min = graph[i][j];
                        u = i;
                        v = j;
                    }
                }
            }
        }
        }
        if(u != -1 and v != -1){
            cout<<u<<"-"<<v<<":"<<min<<endl;
            TotalCost = TotalCost + min;
            visited[v] = 1;
            edges++;
        }
    }
    cout<<"Total minimum cost:"<<TotalCost<<endl;
}

int main()
{
    Prism obj;
    obj.create();
    obj.display();
    obj.prism();
    return 0;
}
